name: Release GenDC Header Library

on:
  push:
    tags:
      - 'v*'  # triggered by tag starting with 'v'

jobs:

  build-and-release-windows:
    runs-on: windows-latest
    env:
      PKG_CONFIG_INSTALL: C:\pkg-config
      PKG_CONFIG_VERSION: 0.28-1
      NINJA_INSTALL: C:\ninja
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.1.1
      with:
        fetch-depth: 0

    - name: Disable perl
      run: |
        rm -r C:\Strawberry\perl

    - name: Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Setup winget for pkg-config-lite
      uses: Cyberboss/install-winget@v1
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup pkg-config-lite
      run: winget install bloodrock.pkg-config-lite --accept-source-agreements --accept-package-agreements --location ${{env.PKG_CONFIG_INSTALL}} --version ${{env.PKG_CONFIG_VERSION}}

    - name: Confirm pkg-config
      id: pkg-config-existence
      uses: andstor/file-existence-action@v3
      with:
        files: ${{env.PKG_CONFIG_INSTALL}}\pkg-config-lite-${{env.PKG_CONFIG_VERSION}}\bin\pkg-config.exe
        fail: true

    - name: Setup Meson
      run: |
        pip install meson

    - name: Setup Ninja
      uses: ahmedyarub/setup-ninja@master
      with:
        version: 1.11.1
        dest: ${{env.NINJA_INSTALL}}

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Set up MSVC command env
      uses: ilammy/msvc-dev-cmd@v1
        
    - name: Check for existing cache
      id: cache_status
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}\vcpkg_installed
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/gst/vcpkg.json') }}

    - name: Install vcpkg
      if: steps.cache_status.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        cd vcpkg && .\bootstrap-vcpkg.bat  && cd ../

    - name: Install dependencies
      if: steps.cache_status.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        dir
        vcpkg.exe install --x-install-root ${{ github.workspace }}\vcpkg_installed --x-manifest-root ${{ github.workspace }}\gst

    - name: Cache dependencies
      if: steps.cache_status.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: ${{ github.workspace }}\vcpkg_installed
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/gst/vcpkg.json') }}

    - name: Setup gendc-python
      run: |
        pip install gendc-python

    - name: Build gst-plugin
      shell: cmd
      run: |
        set PATH=${{env.PKG_CONFIG_INSTALL}}/pkg-config-lite-${{env.PKG_CONFIG_VERSION}}/bin;%PATH%
        set PATH=${{ github.workspace }}/vcpkg_installed/x64-windows/bin;%PATH%
        set PKG_CONFIG_PATH=${{ github.workspace }}/vcpkg_installed/x64-windows/lib/pkgconfig;%PKG_CONFIG_PATH%
        meson setup --prefix ${{ github.workspace }}/install/gendc build -Dgst-plugin=enabled

    - name: Install gst-plugin
      shell: cmd
      run: |
        cd ${{ github.workspace }}/build
        meson install

    - name: Setup modules for gst-test
      run: |
        pip install gendc-python numpy

    - name: Test gst-plugin
      shell: cmd
      run: |
        set PATH=${{ github.workspace }}/vcpkg_installed/x64-windows/tools/gstreamer;%PATH%
        set GST_PLUGIN_PATH=${{ github.workspace }}/install/gendc/lib/gstreamer-1.0;%GST_PLUGIN_PATH%
        set GST_PLUGIN_PATH=${{ github.workspace }}/vcpkg_installed/x64-windows/plugins/gstreamer;%GST_PLUGIN_PATH%
        python ${{ github.workspace }}/gst/test/single_frame_test.py -i ${{ github.workspace }}/test/generated_stub/output.bin -o output -n 6
        if %errorlevel% equ 0 (
          echo PASSED GST single frame test with 6 components
        ) else (
          echo FAILED GST single frame test with 6 components
          exit /b 1
        ) 

    - name: Create zip archive
      run: |
        Copy-Item ${{ github.workspace }}\LICENSE.txt ${{ github.workspace }}/install/gendc
        Compress-Archive -Path ${{ github.workspace }}/install/gendc -DestinationPath ${{ github.workspace }}/gendc-${{ github.ref_name }}-win64.zip

    - name: Extract archive content test
      run: |
        New-Item -Path ${{ github.workspace }} -Name "check_archive_content" -ItemType "directory"
        cd ${{ github.workspace }}\check_archive_content
        Expand-Archive -Path ${{ github.workspace }}/gendc-${{ github.ref_name }}-win64.zip -DestinationPath .  

    - name: Check if archive content exists
      id: check_package_windows
      uses: andstor/file-existence-action@v3
      with:
        files: "${{ github.workspace }}/check_archive_content/gendc/LICENSE.txt, ${{ github.workspace }}/check_archive_content/gendc/include/gendc_separator, ${{ github.workspace }}/check_archive_content/gendc/lib/gstreamer-1.0"
        fail: true


  release-job:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Create ZIP Archive
      run: |
        cd gendc_cpp
        cp ../LICENSE.txt .
        zip -r gendc_separator_${{ github.ref_name }}_win64.zip gendc_separator
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
          files: |
              gendc_cpp/gendc_separator*.zip
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}