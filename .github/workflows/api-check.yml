name: API test
on:
  pull_request:
    branches:
      - main

env:
  PKG_CONFIG_INSTALL: C:\pkg-config
  PKG_CONFIG_VERSION: 0.28-1
  NINJA_INSTALL: C:\ninja

jobs:
  build-windows:
    runs-on: windows-latest
    env: 
      PKG_CONFIG_INSTALL: ${GITHUB_WORKSPACE}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.1.1

    - name: Disable perl
      run: |
        rm -r C:\Strawberry\perl

    - name: Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Setup winget for pkg-config-lite
      uses: Cyberboss/install-winget@v1
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup pkg-config-lite
      run: winget install bloodrock.pkg-config-lite --accept-source-agreements --accept-package-agreements --location ${{env.PKG_CONFIG_INSTALL}} --version ${{env.PKG_CONFIG_VERSION}}

    - name: Confirm pkg-config
      id: pkg-config-existence
      uses: andstor/file-existence-action@v3
      with:
        files: ${{env.PKG_CONFIG_INSTALL}}\pkg-config-lite-${{env.PKG_CONFIG_VERSION}}\bin\pkg-config.exe
        fail: true

    - name: Setup Meson
      run: |
        pip install meson

    - name: Setup Ninja
      uses: ahmedyarub/setup-ninja@master
      with:
        version: 1.11.1
        dest: ${{env.NINJA_INSTALL}}

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Set up MSVC command env
      uses: ilammy/msvc-dev-cmd@v1
        
    - name: Check for existing cache
      id: cache_status
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}\vcpkg_installed
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}

    - name: Install vcpkg
      if: steps.cache_status.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        cd vcpkg && .\bootstrap-vcpkg.bat  && cd ../

    - name: Install dependencies
      if: steps.cache_status.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        vcpkg.exe install --x-install-root ${{ github.workspace }}\vcpkg_installed

    - name: Cache dependencies
      if: steps.cache_status.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: ${{ github.workspace }}\vcpkg_installed
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}

    - name: Build gst-plugin
      shell: cmd
      run: |
        set PATH=${{env.PKG_CONFIG_INSTALL}}/pkg-config-lite-${{env.PKG_CONFIG_VERSION}}/bin;%PATH%
        set PATH=${{ github.workspace }}/vcpkg_installed/x64-windows/bin;%PATH%
        set PKG_CONFIG_PATH=${{ github.workspace }}/vcpkg_installed/x64-windows/lib/pkgconfig;%PKG_CONFIG_PATH%
        meson setup --prefix ${{env.PKG_CONFIG_INSTALL}}/install/gendc build -Dgst-plugin=enabled

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r test/requirements.txt

    - name: Python test
      id: check-result-python
      run: |
        if python3 test/test.py -d test/generated_stub/; then
          echo 'PASSED PYTHON test'
        else
          echo 'FAILED PYTHON test'
          exit 1
        fi

    - name: C++ test
      id: check-result-test
      run: |
        cd test
        g++ test.cpp -o test -I ../gendc_cpp/gendc_separator/
        if ./test -v; then
          echo 'PASSED C++ test'
        else
          echo 'FAILED C++ test'
          exit 1
        fi